filter(speaker == pattern1[4])%>%
select(word, tf_idf)
speaker5 <- most_distinctive_words_per_abolition_speaker %>%
filter(speaker == pattern1[5])%>%
select(word, tf_idf)
kable(speaker1, caption = unique(most_distinctive_words_per_abolition_speaker$speaker)[1])
kable(speaker2, caption = unique(most_distinctive_words_per_abolition_speaker$speaker)[2])
kable(speaker3, caption = unique(most_distinctive_words_per_abolition_speaker$speaker)[3])
kable(speaker4, caption = unique(most_distinctive_words_per_abolition_speaker$speaker)[4])
kable(speaker5, caption = unique(most_distinctive_words_per_abolition_speaker$speaker)[5])
# create a chart
most_distinctive_words_per_abolition_speaker %>%
mutate(word = reorder_within(word, n, speaker)) %>% # rearrange the data by n and speaker
ggplot(aes( # create a chart
x = word,  # word on the x axis
y = n, # n on the y axis
fill = factor(tf_idf) )) + # the color of the bars in the bar chart will reflect tf_idf.
# we must tell the computer to treat tf_idf as a "factor' because the the numbers are enumerated rather than continuous.
geom_col() + # create a bar chart
facet_wrap(~speaker, scales = "free") + # create a series of mini-charts, breaking the data up by speaker
coord_flip() + # switch the information on x and y axes (this is a shortcut to make the 'word' labels easy to read)
scale_x_reordered() + # keep the 'word' axis ordered by n and speaker
scale_fill_grey() + # use a gray scale (if this line is removed, a color chart will be produced)
guides(fill = "none") + # don't show a legend for the colors of the bar chart (if removed, a color legend will be shown)
scale_y_continuous(breaks = function(x)
unique(floor(pretty(seq(min(x), (max(x) + 1) * 1))))) + # use whole numbers, not  decimals, for the x axis +
labs(title = "Speakers\' Most Distinctive Words", # label the visualization with a title
subtitle = "From the Debates in the 1830s on the Abolition of Slavery; pale means more distinctive", # text for the subtitle
x = "Word", # x axis label
y = "Count") # y axis label
most_distinctive_words_per_abolition_speaker2 <- tfidf_per_top_slavery_speaker_1833 %>%
group_by(speaker) %>%
filter(n > 5) %>% # <----------------  this is the only thing that's new
arrange(desc(tf_idf)) %>%
mutate(rank_tf_idf = row_number()) %>%
slice(1:15) %>%
ungroup() %>%
mutate(word = reorder_within(word, n, speaker))
most_distinctive_words_per_abolition_speaker
ggplot(data = most_distinctive_words_per_abolition_speaker2,
aes(x = word, y = n, fill = factor(tf_idf) )) +
geom_col() +
scale_fill_grey() +
facet_wrap(~speaker, scales = "free") +
coord_flip() +
scale_x_reordered() +
guides(fill = "none") +
scale_y_continuous(breaks = function(x)
unique(floor(pretty(seq(min(x), (max(x) + 1) * 1))))) + # use whole numbers, not decimals, for the x axis +
labs(title = "Speakers\' Most Distinctive Words with N > 5",
subtitle = "From the Debates in the 1830s on the Abolition of Slavery; pale means more distinctive",
x = "Word",
y = "Count")
mr_buckingham_slavery_debates <- tfidf_per_top_slavery_speaker_1833 %>%
filter(speaker == "Mr. Buckingham") %>%
arrange(desc(n)) %>%
slice(1:40)
mr_buckingham_slavery_debates
ggplot(data = mr_buckingham_slavery_debates,
aes(x = reorder(word, n), # the x axis will show words ordered by their count
y = n),
fill = factor(tf_idf)) + # the y axis will show n
scale_fill_grey() +
scale_y_continuous(breaks = function(x)
unique(floor(pretty(seq(min(x), (max(x) + 1) * 1))))) + # use whole numbers, not decimals, for the x axis +
geom_col() + # create a bar graph
coord_flip() + # switches the x and y axis for a more elegant presentation
labs(title = "Mr Buckingham\'s Most Frequenlty Spoken Words", # this is another way of labeling title and axes
subtitle = "From the 1833 Debates on the Abolition of Slavery",
x = "Word",
y = "Count")
mr_buckingham_slavery_debates2 <- tfidf_per_top_slavery_speaker_1833 %>%
filter(speaker == "Mr. Buckingham") %>%
arrange(desc(tf_idf)) %>% # <------- the only line that changed
slice(1:40)
ggplot(data = mr_buckingham_slavery_debates2,
aes(x = reorder(word, n), # the x axis will show words ordered by their count
y = n),
fill = factor(tf_idf)) + # the y axis will show n
scale_fill_grey() +
scale_y_continuous(breaks = function(x)
unique(floor(pretty(seq(min(x), (max(x) + 1) * 1))))) + # use whole numbers for the x axis
geom_col() + # create a bar graph
coord_flip() + # switches the x and y axis for a more elegant presentation
labs(title = "Mr Buckingham\'s Most Distinctive Words", # this is another way of labeling title and axes
subtitle = "From the 1833 Debate on the Abolition of Slavery",
x = "Word",
y = "Count")
mr_buckingham_most_distinctive_word <- tfidf_per_top_slavery_speaker_1833 %>%
filter(speaker == "Mr. Buckingham") %>%
arrange(desc(tf_idf)) %>%
slice(1) # <------- the only line that changed
mr_buckingham_most_distinctive_word
library(kableExtra)
# finding just the sentences where Buckingham uses the word "wages"
buckingham_sentences <- slavery_debates_1833 %>%
filter(speaker == "Mr. Buckingham",
str_detect(text, "wages"))
# some fancy code to format the results as a table
kable(buckingham_sentences,
format = "latex",
booktabs = TRUE,
caption = "Buckingham's sentences about slavery invoking the word 'wages'") %>%
kable_styling(latex_options = c("striped", "hold_position"))
buckingham_sentences$text
buckingham_sentences$sentence_id
# moving from a list of sentences to the full speeches for context
buck_speech_ids <- buckingham_sentences %>%
select(sentence_id)
buck_speeches <- buck_speech_ids %>%
left_join(hansard_1830, by = "sentence_id")
# some fancy code to turn it into a table
kable(buck_speeches,
format   = "latex",                         # PDF needs LaTeX
booktabs = TRUE,                            # nicer rules; requires \usepackage{booktabs}
col.names = NULL,                           # no header row ("" can confuse LaTeX)
caption  = "Three Speeches by Buckingham about Slavery that invoke the word 'wages'") %>%
kable_styling(latex_options = c("striped", "hold_position"))
buckingham_sentences_2 <- slavery_debates_1830 %>%
left_join(speaker_metadata_1830) %>%
filter(speaker == "Mr. Buckingham",
str_detect(text, "enjoyment"))
buckingham_sentences_2$text
buckingham_sentences_3 <- slavery_debates_1830 %>%
left_join(speaker_metadata_1830) %>%
filter(speaker == "Mr. Buckingham",
str_detect(text, "love"))
buckingham_sentences_3$text
buckingham_sentences_4 <- slavery_debates_1830 %>%
left_join(speaker_metadata_1830) %>%
filter(speaker == "Mr. Buckingham",
str_detect(text, "universal"))
buckingham_sentences_4$text
buckingham_sentences_5 <- slavery_debates_1830 %>%
left_join(speaker_metadata_1830) %>%
filter(speaker == "Mr. Buckingham",
str_detect(text, "desire"))
buckingham_sentences_5$text
buckingham_sentences_5[5]
missing_context <- hansard_1830 %>%
filter(sentence_id %in% c("S3V0018P0_8990", "S3V0018P0_8991", "S3V0018P0_8992", "S3V0018P0_8993"))
missing_context$text
# concatenate a list of the words I'm interested in
my_words <- c("wage", "enjoyment", "love", "universal", "desire")
# find the tfidf scores for my words by looking in previous data
my_words_w_tfidf <- tfidf_per_top_slavery_speaker_1833 %>%
filter(speaker == "Mr. Buckingham", word %in% my_words) %>% # find just words in my list spoken by Mr. Buckingham
ungroup() %>% # necessary because the previous dataset was grouped
select(word, n, tf_idf) %>% # retain three columns
mutate(tf_idf = round(tf_idf, 4)) # round tf-idf to four decimal places
# make a table
kable(
my_words_w_tfidf,
format = "latex",
booktabs = TRUE,
caption = "Some of Mr. Buckingham's Most Distinctive Words in the Debates About Slavery"
)
peel_sentences <- slavery_1830 %>% # start with the text of speeches
left_join(speaker_metadata_1830) %>%  # merge with speaker information
filter(speaker == "Sir Robert Peel") %>% # keep just the sentences by Peel
filter(str_detect(text, "Assembl|assembl")) # searching for both capitalized, uncapitalized, singular and plural
peel_sentences$text # show us the text of Peel's sentences
# moving from a list of sentences to the full speeches for context
peel_speech_ids <- peel_sentences %>%
select(sentence_id) %>%
left_join(file_metadata_1830) %>% # merge with metadata for the 1830s
select(speech_id)
peel_speeches <- peel_speech_ids %>%
left_join(file_metadata_1830) %>%
select(sentence_id, speech_id) %>%
left_join(hansard_1830) %>% # merge those columns with the text of the speeches
left_join(speaker_metadata_1830) %>%
select(speaker, text, speech_id, speechdate) %>% # choose just the columns with speech, text, and speech_id numbers
group_by(speech_id, speaker, speechdate) %>% # within each speech, paste together each sentence, back to back, with a space in between. Retain the name of the speaker
reframe(speech = paste0(text, collapse = " ")) %>% #paste0(text, " ", text), speaker) %>%
ungroup() %>%
mutate(speech = paste0(speechdate, ": ", toupper(speaker), " ", speech)) %>%
select(speech) # retain just the column with the speaker's name and full speech of each text
# moving from a list of sentences to the full speeches for context
peel_speech_ids <- peel_sentences %>%
select(sentence_id, speechdate) %>%
left_join(file_metadata_1830) %>% # merge with metadata for the 1830s
select(speech_id)
peel_speeches <- peel_speech_ids %>%
left_join(file_metadata_1830) %>%
select(sentence_id, speech_id) %>%
left_join(hansard_1830) %>% # merge those columns with the text of the speeches
left_join(speaker_metadata_1830) %>%
select(speaker, text, speech_id, speechdate) %>% # choose just the columns with speech, text, and speech_id numbers
group_by(speech_id, speaker, speechdate) %>% # within each speech, paste together each sentence, back to back, with a space in between. Retain the name of the speaker
reframe(speech = paste0(text, collapse = " ")) %>% #paste0(text, " ", text), speaker) %>%
ungroup() %>%
mutate(speech = paste0(speechdate, ": ", toupper(speaker), " ", speech)) %>%
select(speech) # retain just the column with the speaker's name and full speech of each text
View(peel_sentences)
View(peel_sentences)
View(peel_speech_ids)
# moving from a list of sentences to the full speeches for context
peel_speech_ids <- peel_sentences %>%
select(sentence_id) %>%
left_join(file_metadata_1830) %>% # merge with metadata for the 1830s
select(speech_id)
peel_speeches <- peel_speech_ids %>%
left_join(file_metadata_1830) %>%
select(sentence_id, speech_id) %>%
left_join(hansard_1830) %>% # merge those columns with the text of the speeches
left_join(speaker_metadata_1830) %>%
select(speaker, text, speech_id, speechdate) %>% # choose just the columns with speech, text, and speech_id numbers
group_by(speech_id, speaker, speechdate) %>% # within each speech, paste together each sentence, back to back, with a space in between. Retain the name of the speaker
reframe(speech = paste0(text, collapse = " ")) %>% #paste0(text, " ", text), speaker) %>%
ungroup() %>%
mutate(speech = paste0(speechdate, ": ", toupper(speaker), " ", speech)) %>%
select(speech) # retain just the column with the speaker's name and full speech of each text
peel_speech_ids <- peel_sentences %>%
select(sentence_id) %>%
left_join(file_metadata_1830) %>% # merge with metadata for the 1830s
select(speech_id)
peel_speeches <- peel_speech_ids %>%
left_join(file_metadata_1830) %>%
select(sentence_id, speech_id)
View(peel_speech_ids)
peel_speech_ids <- peel_sentences %>%
select(sentence_id) %>%
left_join(file_metadata_1830) %>% # merge with metadata for the 1830s
select(speech_id)
peel_speeches <- peel_speech_ids %>%
left_join(file_metadata_1830)
peel_speech_ids <- peel_sentences %>%
select(sentence_id) %>%
left_join(file_metadata_1830) %>% # merge with metadata for the 1830s
select(speech_id)
peel_speeches <- peel_speech_ids %>%
left_join(file_metadata_1830, by = "speech_id")
peel_speech_ids <- peel_sentences %>%
select(sentence_id) %>%
left_join(file_metadata_1830)
peel_speech_ids <- peel_sentences %>%
select(sentence_id) %>%
left_join(file_metadata_1830)
peel_speeches <- peel_speech_ids %>%
left_join(file_metadata_1830, by = "sentence_id") %>%
left_join(hansard_1830, by = "sentence_id") %>% # merge those columns with the text of the speeches
left_join(speaker_metadata_1830, "sentence_id") %>%
select(speaker, text, speech_id, speechdate) %>% # choose just the columns with speech, text, and speech_id numbers
group_by(speech_id, speaker, speechdate) %>% # within each speech, paste together each sentence, back to back, with a space in between. Retain the name of the speaker
reframe(speech = paste0(text, collapse = " ")) %>% #paste0(text, " ", text), speaker) %>%
ungroup() %>%
mutate(speech = paste0(speechdate, ": ", toupper(speaker), " ", speech)) %>%
select(speech) # retain just the column with the speaker's name and full speech of each text
peel_speeches <- peel_speech_ids %>%
left_join(file_metadata_1830, by = "sentence_id") %>%
left_join(hansard_1830, by = "sentence_id") %>% # merge those columns with the text of the speeches
left_join(speaker_metadata_1830, "sentence_id") %>%
select(sentence_id, speaker, text, speech_id, speechdate) %>% # choose just the columns with speech, text, and speech_id numbers
group_by(speech_id, speaker, speechdate)
peel_speech_ids <- peel_sentences %>%
select(sentence_id, speech_id) %>%
left_join(file_metadata_1830)
peel_speech_ids <- peel_sentences %>%
select(sentence_id, speech_id) %>%
left_join(file_metadata_1830, by = "sentence_id")
View(slavery_1830)
file_metadata_1830
a <- peel_speech_ids %>%
left_join(file_metadata_1830, by = "sentence_id")
View(a)
# moving from a list of sentences to the full speeches for context
library("dplyr")
library("kableExtra")
# 1) Pre-trim each source to just the fields you need
peel_base <- peel_sentences %>%
select(sentence_id, speech_id)
peel_sentences <- slavery_1830 %>% # start with the text of speeches
left_join(speaker_metadata_1830) %>%  # merge with speaker information
filter(speaker == "Sir Robert Peel",  # keep just the sentences by Peel
str_detect(text, "Assembl|assembl")) # searching for both capitalized, uncapitalized, singular and plural
peel_sentences$text # show us the text of Peel's sentences
# moving from a list of sentences to the full speeches for context
library("dplyr")
library("kableExtra")
# 1) Pre-trim each source to just the fields you need
peel_base <- peel_sentences %>%
select(sentence_id, speech_id)
View(peel_sentences)
# moving from a list of sentences to the full speeches for context
library("dplyr")
library("kableExtra")
# 1) Pre-trim each source to just the fields you need
peel_base <- peel_sentences %>%
select(sentence_id)
hansard_trim <- hansard_1830 %>%
select(sentence_id, text, speechdate)
# moving from a list of sentences to the full speeches for context
library("dplyr")
library("kableExtra")
# 1) Pre-trim each source to just the fields you need
peel_base <- peel_sentences %>%
select(sentence_id)
hansard_trim <- hansard_1830 %>%
select(sentence_id, text, speechdate)
debate_metadata_1830
# moving from a list of sentences to the full speeches for context
library("dplyr")
library("kableExtra")
# Trim each source to just the fields you need
peel_base <- peel_sentences %>%
select(sentence_id)
hansard_trim <- hansard_1830 %>%
select(sentence_id, text)
debate_trim <- debate_metadata_1830 %>%
select(sentence_id, speechdate)
speaker_trim <- speaker_metadata_1830 %>%
select(sentence_id, speaker)
file_meta_trim <- file_metadata_1830 %>%
select(sentence_id, speech_id)
peel_speeches <- peel_base %>%
left_join(hansard_trim,  by = "sentence_id") %>%
left_join(speaker_trim,  by = "sentence_id") %>%
# left_join(file_meta_trim, by = "sentence_id") %>%   # <- only if you need it
group_by(speech_id, speaker, speechdate) %>%
summarise(speech = paste(text, collapse = " "), .groups = "drop") %>%
mutate(speech = paste0(speechdate, ": ", toupper(speaker), " ", speech)) %>%
select(speech)
peel_speeches <- peel_base %>%
left_join(hansard_trim,  by = "sentence_id") %>%
left_join(speaker_trim,  by = "sentence_id") %>%
left_join(file_meta_trim, by = "sentence_id") %>%
left_join(debate_trim, by = "sentence_id") %>%
group_by(speech_id, speaker, speechdate) %>%
summarise(speech = paste(text, collapse = " "), .groups = "drop") %>%
mutate(speech = paste0(speechdate, ": ", toupper(speaker), " ", speech)) %>%
select(speech)
# 3) Pretty table
kable(
peel_speeches,
format   = "html",
col.names = "",
caption  = "Three Speeches by Buckingham about Slavery That Invoke the Word 'Wages'"
) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
head(buckingham_sentences)
peel_speeches <- peel_base %>%
left_join(hansard_trim,  by = "sentence_id") %>%
left_join(speaker_trim,  by = "sentence_id") %>%
left_join(file_meta_trim, by = "sentence_id") %>%
left_join(debate_trim, by = "sentence_id") %>%
group_by(speech_id, speaker, speechdate) %>%
summarise(speech = paste(text, collapse = " "), .groups = "drop") %>%
mutate(speech = paste0(speechdate, ": ", toupper(speaker), " ", speech)) %>%
select(speech)
# 3) Pretty table
kable(
peel_speeches,
format   = "html",
col.names = "",
caption  = "Three Speeches by Buckingham about Slavery That Invoke the Word 'Wages'"
) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
slavery_debates_before_1833 <- slavery_1830 %>%
filter(year < 1833)
freedom_collocates_before_1833 <- slavery_debates_before_1833 %>%
mutate(when = "1830-32") %>%
filter(str_detect(tolower(text), "labour")) %>%
unnest_tokens(word, text) %>%
# anti_join(stop_words) %>%
# anti_join(custom_stop_words) %>%
group_by(when, word) %>%
reframe(n = n()) %>%
arrange(desc(n))
top_freedom_collocates_before_1833 <- freedom_collocates_before_1833 %>%
top_n(30)
top_freedom_collocates_before_1833
slavery_debates_before_1833 <- slavery_1830 %>%
filter(year < 1833)
freedom_collocates_before_1833 <- slavery_debates_before_1833 %>%
mutate(when = "1830-32") %>%
filter(str_detect(tolower(text), "labour")) %>%
unnest_tokens(word, text) %>%
# anti_join(stop_words) %>%
# anti_join(custom_stop_words) %>%
group_by(when, word) %>%
reframe(n = n()) %>%
arrange(desc(n))
top_freedom_collocates_before_1833 <- freedom_collocates_before_1833 %>%
top_n(30)
top_freedom_collocates_before_1833
slavery_debates_after_1833 <- slavery_1830 %>%
filter(year > 1833)
freedom_collocates_after_1833 <- slavery_debates_after_1833 %>%
mutate(when = "1834-36") %>%
filter(str_detect(tolower(text), "free")) %>%
unnest_tokens(word, text) %>%
# anti_join(stop_words) %>%
# anti_join(custom_stop_words) %>%
group_by(when, word) %>%
reframe(n = n()) %>%
arrange(desc(n))
top_freedom_collocates_after_1833 <- freedom_collocates_before_1833 %>%
top_n(30)
top_freedom_collocates_after_1833
freedom_collocates_before_1833 <- slavery_debates_before_1833 %>%
mutate(when = "1830-32") %>%
filter(str_detect(tolower(text), "free")) %>%
unnest_tokens(word, text) %>%
# anti_join(stop_words) %>%
# anti_join(custom_stop_words) %>%
group_by(when, word) %>%
reframe(n = n()) %>%
arrange(desc(n))
freedom_collocates_after_1833 <- slavery_debates_after_1833 %>%
mutate(when = "1834-36") %>%
filter(str_detect(tolower(text), "free")) %>%
unnest_tokens(word, text) %>%
# anti_join(stop_words) %>%
# anti_join(custom_stop_words) %>%
group_by(when, word) %>%
reframe(n = n()) %>%
arrange(desc(n))
tf_idf_freedom_collocates <- bind_rows(freedom_collocates_after_1833, freedom_collocates_before_1833) %>%
bind_tf_idf(word, when, n) %>%
arrange(-tf_idf) %>%
select(when, word, n, tf_idf)
tf_idf_freedom_collocates_before <- tf_idf_freedom_collocates %>%
filter(when == "1830-32") %>%
select(-when) %>%
top_n(15)
tf_idf_freedom_collocates_after <- tf_idf_freedom_collocates %>%
filter(when == "1834-36") %>%
select(-when) %>%
top_n(15)
kable(tf_idf_freedom_collocates_before, caption = "1830-32")
kable(tf_idf_freedom_collocates_after, caption = "1834-36")
hansard_before_1833 <- hansard_1830 %>%
filter(year < 1833) %>%
bind_rows(hansard_1820)
hansard_before_1833 <- hansard_1830 %>%
mutate(year = as.numeric(year)) %>%
filter(year < 1833) %>%
bind_rows(hansard_1820)
hansard_before_1833 <- hansard_1830 %>%
mutate(year = year(year)) %>%
filter(year < 1833) %>%
bind_rows(hansard_1820)
hansard_before_1833 <- hansard_1830 %>%
mutate(year = year(as.Date(.data$speechdate))) %>%
filter(year < 1833) %>%
bind_rows(hansard_1820)
hansard_before_1833 <- hansard_1830 %>%
mutate(year = year(as.Date(speechdate))) %>%
filter(year < 1833) %>%
bind_rows(hansard_1820)
View(hansard_1830)
hansard_before_1833 <- hansard_1830 %>%
left_join(debate_metadata, by = "sentence_id")
hansard_before_1833 <- hansard_1830 %>%
left_join(debate_metadata_1830, by = "sentence_id")
filter(year < 1833) %>%
bind_rows(hansard_1820)
hansard_before_1833 <- hansard_1830 %>%
left_join(debate_metadata_1830, by = "sentence_id")
View(hansard_before_1833)
hansard_before_1833 <- hansard_1830 %>%
left_join(debate_metadata_1830, by = "sentence_id") %>%
mutate(year = year(speechdate)) %>%
filter(year < 1833) %>%
bind_rows(hansard_1820)
hansard_before_1833 <- hansard_1830 %>%
left_join(debate_metadata_1830, by = "sentence_id") %>%
mutate(year = year(speechdate)) %>%
filter(year < 1833) %>%
bind_rows(hansard_1820)
hansard_after_1833 <- hansard_1830 %>%
left_join(debate_metadata_1830, by = "sentence_id") %>%
mutate(year = year(speechdate)) %>%
filter(year > 1833)
freedom_collocates_before_1833 <- hansard_before_1833 %>%
mutate(when = "before 1833") %>%
filter(str_detect(tolower(text), "freedom")) %>%
unnest_tokens(word, text) %>%
# anti_join(stop_words) %>%
# anti_join(custom_stop_words) %>%
group_by(when, word) %>%
reframe(n = n()) %>%
arrange(desc(n))
freedom_collocates_after_1833 <- hansard_after_1833 %>%
mutate(when = "after 1833") %>%
filter(str_detect(tolower(text), "freedom")) %>%
unnest_tokens(word, text) %>%
# anti_join(stop_words) %>%
# anti_join(custom_stop_words) %>%
group_by(when, word) %>%
reframe(n = n()) %>%
arrange(desc(n))
tf_idf_freedom_collocates <- bind_rows(freedom_collocates_after_1833, freedom_collocates_before_1833) %>%
bind_tf_idf(word, when, n) %>%
arrange(-tf_idf) %>%
select(when, word, n, tf_idf)
tf_idf_freedom_collocates_before <- tf_idf_freedom_collocates %>%
filter(when == "before 1833") %>%
select(-when) %>%
#filter(n>5) %>%
top_n(15, wt = tf_idf)
tf_idf_freedom_collocates_after <- tf_idf_freedom_collocates %>%
filter(when == "after 1833") %>%
select(-when) %>%
#filter(n>10) %>%
top_n(15, wt = tf_idf)
kable(tf_idf_freedom_collocates_before, caption = "1820-32")
kable(tf_idf_freedom_collocates_after, caption = "1834-39")
kable(tf_idf_freedom_collocates_after, caption = "1834-39")
install.packages(reticulate)
install.packages("reticulate")
